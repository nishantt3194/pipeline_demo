# name: workflow to buid the backend artifacts
# on: 
#   repository_dispatch:
#     types: [build]
# jobs:
#   code-checkout:
#     runs-on: ubuntu-latest


#     steps:
#       - name: debug step - Log payload
#         if: github.event.client_payload.debug == true
#         run: 'echo "payload: ${{ toJson(github.event ) }}"'

#       - name: checkout code
#         uses: action/checkout@v3                                    ########### job1

#       - name: Debug step- List files
#         if: github.event.client_payload.debug == true
#         run: |
#             pwd
#             ls -a
#             git branch

#       - name: Artifacting backend code
#         uses: actions/upload-artifact@v3
#         with: 
#           name: backend-code
#           path: Services

#   user-service-build:
#     runs-on: ubuntu-latest
#     needs: code-checkout
#     defaults:
#       run: 
#         working-directory: ./User Service

#     steps:
#       - name: Download credit service from artifacts
#         uses: actions/download-artifact@v3
#         with: 
#           name: backend-code
      
#       - name: Debug step - list files
#         if: github.event.client_payload.debug == true
#         run: | 
#           ls -aR

#       - name: Setup JDK 17
#         uses: actions/setup-java@v3
#         with: 
#           java-version: '17'
#           distribution: 'zulu'
#           cache: 'gradle'

#       - name: Validate gradle wrapper
#         if: github.event.client_payload.debug == true
#         uses: graddle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

          
#       - name: Setup Gradle
#         uses: gradle/gradle-build-action@v2
      
#       - name: Execute Gradle build
#         id: gradle-build-image
#         run: |
#           chmod +x ./gradlew
#           ./gradlew build

#       - name: List docker image
#         run: |
#           docker image ls 
#           echo ${{  steps.gradle-build-image.outputs }}

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-south-1

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

      
#       - name: Push Image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: testecrrepo
#           IMAGE_TAG: user-service
#         run: |
#           echo $ECR_REGISTRY
#           echo $ECR_REPOSITORY
#           docker tag user-service:1.0.0 $ECR_REGISTRY/$ECR_REPOSITORY
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY